@page "/search"
@using Common.Models
@inject HttpClient _httpClient

<PageTitle>Поиск материалов</PageTitle>

<h3>Поиск</h3>
<div style="margin-bottom: 25px; margin-top: 25px">
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Поисковый запрос" @bind="SearchQuery" @bind:event="oninput">
        <select class="form-select" id="category" @bind="Category" @bind:event="onchange">
            <option value="news" selected>Новости</option>
            <option value="articles">Истории</option>
            <option value="shapito">Шапито</option>
        </select>
        <button class="btn btn-outline-secondary" type="button" @onclick="ShowHeadings">Искать</button>
    </div>
</div>

@if (ShowSpinner)
{
    <Spinner/>
}

@if (ShowHeadingsList)
{
    <ErrorBoundary>
        <ChildContent>
            <HeadingsListComponent Headings="Headings"/>
        </ChildContent>
        <ErrorContent Context="ex">
            <div class="alert alert-danger" role="alert">
                <p>Ошибка при загрузке списка материалов...</p>
                <hr>
                <p class="mb-0">@ex.StackTrace</p>
            </div>
        </ErrorContent>
    </ErrorBoundary>
}

@code {

    private bool ShowSpinner { get; set; }

    private List<HeadingModel> Headings { get; set; } = new();

    private void InsertMarkdownIntoTitleWords(string[] words)
    {
        var word = words.FirstOrDefault(word => SearchQuery != null && word.Contains(SearchQuery, StringComparison.InvariantCultureIgnoreCase));
        if (string.IsNullOrWhiteSpace(word)) return;

        var wordWithMarkdown = string.Empty;
        if (SearchQuery != null)
        {
            var firstOccurenceOfSearchQuery = word.IndexOf(SearchQuery, StringComparison.InvariantCultureIgnoreCase);
            var searchQueryWithRightCasing = word.Substring(firstOccurenceOfSearchQuery, SearchQuery.Length);
            wordWithMarkdown = word
                .Replace(SearchQuery, $"<span style=\"background-color: yellow\">{searchQueryWithRightCasing}</span>",
                    StringComparison.InvariantCultureIgnoreCase);
        }
        if (string.IsNullOrWhiteSpace(wordWithMarkdown)) return;

        var index = Array.FindIndex(words, row => row.Equals(word, StringComparison.InvariantCultureIgnoreCase));
        if (index != -1)
        {
            words[index] = wordWithMarkdown;
        }
    }

    private bool ShowHeadingsList { get; set; }

    private async Task ShowHeadings()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery) == false)
        {
            ShowHeadingsList = false;
            ShowSpinner = true;
            var headings = await _httpClient
                .GetFromJsonAsync<IEnumerable<HeadingModel>>($"https://search-river.herokuapp.com/{Category}?search={SearchQuery}") ?? Array.Empty<HeadingModel>();
            Headings = headings.ToList();

            InsertMarkDownIntoTitles();

            ShowHeadingsList = true;
            ShowSpinner = false;
        }
    }

    private void InsertMarkDownIntoTitles()
    {
        Headings.ForEach(heading =>
        {
            var words = heading.Title.Split(" ");
            InsertMarkdownIntoTitleWords(words);

            heading.Title = string.Join(' ', words);
        });
    }

    private string? Category { get; set; } = "news";

    private string? SearchQuery { get; set; }

}
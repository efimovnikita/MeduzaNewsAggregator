@page "/"
@using Common.Models
@inject HttpClient _httpClient

<PageTitle>Новости</PageTitle>

<h3>Новости</h3>
<div style="margin-bottom: 25px; margin-top: 25px">
    <div class="input-group mb-3">
        <label class="input-group-text" for="category">Категория:</label>
        <select class="form-select" id="category" @bind="_category" @bind:event="onchange">
            <option value="news" selected>Новости</option>
            <option value="articles">Истории</option>
            <option value="shapito">Шапито</option>
        </select>
        <div class="input-group-text">
            <input class="form-check-input mt-0" type="checkbox" @bind="_today" @bind:event="onchange">
            <label class="text-black-50" style="margin-left: 10px">Сегодня</label>
        </div>
        <button class="btn btn-primary" type="button" @onclick="ShowHeadings">Показать</button>
    </div>
</div>

@if (ShowSpinner)
{
    <Spinner/>
}

@if (_showHeadingsList)
{
    <ErrorBoundary>
        <ChildContent>
            <HeadingsListComponent Headings="Headings"/>
        </ChildContent>
        <ErrorContent Context="ex">
            <div class="alert alert-danger" role="alert">
              <p>Ошибка при загрузке списка материалов...</p>
              <hr>
              <p class="mb-0">@ex.StackTrace</p>
            </div>
        </ErrorContent>
    </ErrorBoundary>
}

@code {
    private bool _showHeadingsList;

    private List<HeadingModel> Headings
    {
        get
        {
            return _today == false ?
                _headings
                : _headings.Where(model => model.Pub_Date.Date == DateTime.Today).ToList();
        }
        set => _headings = value;
    }

    private string? _category = "news";
    private bool _today = true;
    private List<HeadingModel> _headings = new();

    private bool ShowSpinner { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ShowHeadings();
    }

    private async Task ShowHeadings()
    {
        _showHeadingsList = false;
        ShowSpinner = true;
        var headings = await _httpClient
            .GetFromJsonAsync<IEnumerable<HeadingModel>>($"https://headings-river.herokuapp.com/Headings/{_category}") ?? Array.Empty<HeadingModel>();
        Headings = headings.ToList();
        
        _showHeadingsList = true;
        ShowSpinner = false;
    }
}
@inject HttpClient _httpClient
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IJSRuntime _jsRuntime

<div>
    <div style="cursor: pointer; text-decoration: underline" @onclick="GetArticle">
        @((MarkupString)(Title ?? "Error getting title"))
        <span style="margin-left: 10px; color: darkgray; text-decoration: none; display: inline-block; font-size: 12px">
            <span class="oi oi-calendar" aria-hidden="true"></span> @ReadableTime
        </span>
    </div>
    @if (ShowSpinner)
    {
        <div>
            <Spinner/>
        </div>
    }
    @if (ShowText && !string.IsNullOrEmpty(Text))
    {
        <div style="padding: 10px; color: #4f5050">
            <div style="white-space: pre-wrap">@Text</div>
            <div style="margin-top: 5px; text-transform: lowercase">
                <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="NavigateToMeduza">
                    <span class="oi oi-link-intact" aria-hidden="true"></span>
                </button>
                <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="CopyToClipboard">
                    <span class="oi oi-clipboard" aria-hidden="true"></span>
                </button>
                @if (ShowClipboardCopyText)
                {
                    <span style="margin-left: 10px; font-size: 12px">Ссылка скопирована...</span>
                }
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public string? Url { get; set; }

    [Parameter]
    public DateTime Date { get; set; }

    [Parameter]
    public int Time { get; set; }

    private string ReadableTime => new DateTime(1970, 1, 1, 3, 0, 0).AddSeconds(Time).ToString("HH:mm | dd/MM/yyyy");

    private string FullUrl => $"https://meduza.io/{Url}";

    private bool ShowText { get; set; }

    private bool ShowSpinner { get; set; }
    
    private bool ShowClipboardCopyText { get; set; }

    private async Task GetArticle()
    {
        if (Url is not null && string.IsNullOrEmpty(Text))
        {
            ShowSpinner = true;

            if (!string.IsNullOrEmpty(await _localStorage.GetItemAsStringAsync(Url)))
            {
                Text = await _localStorage.GetItemAsStringAsync(Url);
            }
            else
            {
                var articleResponse = await _httpClient
                    .GetStringAsync($"https://articles-river.herokuapp.com/Articles/{Url.Replace("/", "%2f")}");
                await _localStorage.SetItemAsStringAsync(Url, articleResponse);
                Text = articleResponse;
            }

            ShowSpinner = false;
        }

        ShowText = !ShowText;
    }

    private async Task CopyToClipboard()
    {
        await _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", FullUrl);
        ShowClipboardCopyText = true;
    }

    private async Task NavigateToMeduza() => await _jsRuntime.InvokeAsync<object>("open", FullUrl, "_blank");
}
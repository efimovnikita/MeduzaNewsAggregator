@page "/search"
@inject HttpClient _httpClient
@inject IState _appState
@using NewsAggregatorWebWASMUIv2.Services
@using Common.Models
@implements IDisposable

<PageTitle>Поиск материалов</PageTitle>

<h3>Поиск</h3>
<div style="margin-bottom: 25px; margin-top: 25px">
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Поисковый запрос" @bind="SearchQuery" @bind:event="oninput">
        <select class="form-select" id="category" @bind="Category" @bind:event="onchange">
            <option value="news" selected>Новости</option>
            <option value="articles">Истории</option>
            <option value="shapito">Шапито</option>
        </select>
        <button class="btn btn-outline-secondary" type="button" @onclick="GetArticles">Искать</button>
    </div>
</div>

@if (ShowSpinner)
{
    <Spinner/>
}

@if (ShowList)
{
    <ErrorBoundary>
        <ChildContent>
            <ol class="fade-in">
                @foreach (var article in Articles)
                {
                    <li style="margin-bottom: 5px">
                        <ArticleComponent FullArticle="article"/>
                    </li>
                }
            </ol>
        </ChildContent>
        <ErrorContent Context="ex">
            <div class="alert alert-danger" role="alert">
                <p>Ошибка при загрузке списка материалов...</p>
                <hr>
                <p class="mb-0">@ex.StackTrace</p>
            </div>
        </ErrorContent>
    </ErrorBoundary>
}

@code {

    protected override void OnInitialized()
    {
        _appState.StateChanged += StateHasChanged;
    }

    private List<FullArticle> Articles => _appState.SearchedArticles;

    private bool ShowSpinner { get; set; }
    private bool ShowList { get; set; }

    private void InsertMarkdownIntoTitleWords(string[] words)
    {
        var word = words.FirstOrDefault(word => SearchQuery != null && word.Contains(SearchQuery, StringComparison.InvariantCultureIgnoreCase));
        if (string.IsNullOrWhiteSpace(word)) return;

        var wordWithMarkdown = string.Empty;
        if (SearchQuery != null)
        {
            var firstOccurenceOfSearchQuery = word.IndexOf(SearchQuery, StringComparison.InvariantCultureIgnoreCase);
            var searchQueryWithRightCasing = word.Substring(firstOccurenceOfSearchQuery, SearchQuery.Length);
            wordWithMarkdown = word
                .Replace(SearchQuery, $"<span style=\"background-color: yellow\">{searchQueryWithRightCasing}</span>",
                    StringComparison.InvariantCultureIgnoreCase);
        }
        if (string.IsNullOrWhiteSpace(wordWithMarkdown)) return;

        var index = Array.FindIndex(words, row => row.Equals(word, StringComparison.InvariantCultureIgnoreCase));
        if (index != -1)
        {
            words[index] = wordWithMarkdown;
        }
    }

    private async Task GetArticles()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery) == false)
        {
            ShowList = false;
            ShowSpinner = true;

            var headings = await _httpClient
                .GetFromJsonAsync<IEnumerable<HeadingModel>>($"https://search-river.herokuapp.com/{Category}?search={SearchQuery}") ?? Array.Empty<HeadingModel>();

            var headingModels = headings.ToList();
            InsertMarkDownIntoTitles(headingModels.ToList());

            var fullArticles = headingModels
                .Select(model => new FullArticle(model.Title, model.Url, model.Pub_Date, model.Published_At, model.Tag)).ToList();
            _appState.AddSearchedArticles(fullArticles);

            ShowList = true;
            ShowSpinner = false;
        }
    }

    private void InsertMarkDownIntoTitles(List<HeadingModel> headingModels)
    {
        headingModels.ForEach(headingModel =>
        {
            var words = headingModel.Title.Split(" ");
            InsertMarkdownIntoTitleWords(words);

            headingModel.Title = string.Join(' ', words);
        });
    }

    private string? Category { get; set; } = "news";

    private string? SearchQuery { get; set; }

    public void Dispose()
    {
        _appState.StateChanged -= StateHasChanged;
    }

}
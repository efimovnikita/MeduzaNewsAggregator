@using Common.Models
@using NewsAggregatorWebWASMUIv2.Services
@using System.ComponentModel.DataAnnotations
@inject IState _appState
@implements IDisposable
@inject IJSRuntime _jsRuntime

<div>
    <button style="border: none; text-decoration: underline; text-align: left; color: #1a1e21; background-color: transparent" @onclick="GetText">
        @((MarkupString) FullArticle.Title)
        <span style="margin-left: 10px; color: darkgray; text-decoration: none; display: inline-block; font-size: 12px">
            <span class="oi oi-calendar" aria-hidden="true"></span> @ReadableTime
        </span>
    </button>
    @if (ShowSpinner)
    {
        <div>
            <Spinner/>
        </div>
    }
    @if (FullArticle.Expanded)
    {
        <article style="padding: 10px; color: #4f5050">
            <section style="white-space: pre-wrap">@FullArticle.Text</section>
            <footer style="margin-top: 5px; text-transform: lowercase">
                <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="FollowLink">
                    <span class="oi oi-link-intact" aria-hidden="true"></span>
                </button>
                <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="CopyToClipboard">
                    <span class="oi oi-clipboard" aria-hidden="true"></span>
                </button>
                @if (ShowCopyLinkText)
                {
                    <span style="margin-left: 10px; font-size: 12px">Ссылка скопирована...</span>
                }
            </footer>
        </article>
    }
</div>

@code {

    protected override void OnInitialized()
    {
        _appState.StateChanged += StateHasChanged;
    }

    [Parameter]
#pragma warning disable CS8618
        public FullArticle FullArticle { get; set; }
#pragma warning restore CS8618

    private bool ShowSpinner { get; set; }
    private bool ShowCopyLinkText { get; set; }
    private string FullUrl => $"https://meduza.io/{FullArticle.Url}";

    private string ReadableTime => new DateTime(1970, 1, 1, 3, 0, 0).AddSeconds(FullArticle.PublishedAt).ToString("HH:mm | dd/MM/yyyy");

    private async Task GetText()
    {
        /*
        if (string.IsNullOrEmpty(FullArticle.Url) == false && string.IsNullOrEmpty(FullArticle.Text))
        {
            ShowSpinner = true;

            var response = await _httpClient
                .GetStringAsync($"https://articles-river.herokuapp.com/Articles/{FullArticle.Url.Replace("/", "%2f")}");
            _appState.AddTextToSimpleArticle(FullArticle.Title, response);
            _appState.AddTextToSearchArticle(FullArticle.Title, response);

            ShowSpinner = false;
        }

        FullArticle.Expanded = !FullArticle.Expanded;
    */
    }

    public void Dispose()
    {
        _appState.StateChanged -= StateHasChanged;
    }

    private async Task FollowLink() => await _jsRuntime.InvokeAsync<object>("open", FullUrl, "_blank");

    private async Task CopyToClipboard()
    {
        await _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", FullUrl);
        ShowCopyLinkText = true;
    }

}